{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  AFTER_DELETE: \"AFTER_DELETE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.AFTER_DELETE:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.createList = function () {\n    async function createList() {\n      let newList = {\n        \"name\": \"Untitled\",\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      };\n      const response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        store.history.push(\"/top5list/\" + top5List._id);\n      } else {\n        console.log(\"Upload Failed\");\n      }\n    }\n\n    createList();\n  };\n\n  store.hideDeleteListModal = function () {\n    store.closeCurrentList();\n  };\n\n  store.deleteMarkedList = function (list) {\n    async function deleteList(list) {\n      const response = await api.deleteTop5ListById(list._id);\n\n      if (response.data.success) {\n        const response = await api.getTop5ListPairs(); //Update List Pairs\n\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.AFTER_DELETE,\n            payload: {\n              idNamePairs: pairsArray\n            }\n          });\n        }\n      }\n    }\n\n    deleteList(list);\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addUpdateItemTransaction = function (index, oldText, newText) {\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, text) {\n    store.currentList.items[index] = text;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A ITEM NAME\n\n\n  store.setIsItemNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE\n    });\n  };\n\n  store.setIsDeleteActive = function (id) {\n    async function setIsDeleteActive(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: top5List\n        });\n      }\n    }\n\n    setIsDeleteActive(id);\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["C:/Users/tungd.LAPTOP-8M0B2CR6/Downloads/CSE 316/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_ITEM_NAME_EDIT_ACTIVE","DELETE_LIST","AFTER_DELETE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createList","newList","createTop5List","history","push","hideDeleteListModal","deleteMarkedList","list","deleteList","deleteTop5ListById","setCurrentList","asyncSetCurrentList","addUpdateItemTransaction","index","oldText","newText","transaction","addTransaction","addMoveItemTransaction","start","end","moveItem","temp","items","i","updateCurrentList","updateItem","text","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemNameEditActive","setIsDeleteActive"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAO,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMO,qBAAqB,GAAG;AACjCC,EAAAA,gBAAgB,EAAE,kBADe;AAEjCC,EAAAA,kBAAkB,EAAE,oBAFa;AAGjCC,EAAAA,kBAAkB,EAAE,oBAHa;AAIjCC,EAAAA,gBAAgB,EAAE,kBAJe;AAKjCC,EAAAA,yBAAyB,EAAE,2BALM;AAMjCC,EAAAA,yBAAyB,EAAE,2BANM;AAOjCC,EAAAA,WAAW,EAAE,aAPoB;AAQjCC,EAAAA,YAAY,EAAE;AARmB,CAA9B,C,CAWP;;AACA,MAAMC,GAAG,GAAG,IAAId,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMe,cAAc,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC;AAC/BmB,IAAAA,WAAW,EAAE,EADkB;AAE/BC,IAAAA,WAAW,EAAE,IAFkB;AAG/BC,IAAAA,cAAc,EAAE,CAHe;AAI/BC,IAAAA,cAAc,EAAE,KAJe;AAK/BC,IAAAA,UAAU,EAAE,KALmB;AAM/BC,IAAAA,qBAAqB,EAAE;AANQ,GAAD,CAAlC,CAFgC,CAWhC;AACA;;AACA,QAAMC,YAAY,GAAIC,MAAD,IAAY;AAC7B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,MAA1B;;AACA,YAAQC,IAAR;AACI;AACA,WAAKrB,qBAAqB,CAACC,gBAA3B;AAA6C;AACzC,iBAAOW,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OAAO,CAACT,WADT;AAEZC,YAAAA,WAAW,EAAEQ,OAAO,CAACC,QAFT;AAGZR,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKlB,qBAAqB,CAACE,kBAA3B;AAA+C;AAC3C,iBAAOU,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;;AACD,WAAKlB,qBAAqB,CAACQ,YAA3B;AAAyC;AACrC,iBAAOI,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OAAO,CAACT,WADT;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKlB,qBAAqB,CAACG,kBAA3B;AAA+C;AAC3C,iBAAOS,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OADD;AAEZR,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKlB,qBAAqB,CAACI,gBAA3B;AAA6C;AACzC,iBAAOQ,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKlB,qBAAqB,CAACK,yBAA3B;AAAsD;AAClD,iBAAOO,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,IAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;;AACD,WAAKlB,qBAAqB,CAACM,yBAA3B;AAAsD;AAClD,iBAAOM,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEH,KAAK,CAACG,WAFP;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,IALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;;AACD,WAAKlB,qBAAqB,CAACO,WAA3B;AAAwC;AACpC,iBAAOK,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAEI;AANX,WAAD,CAAf;AAQH;;AACD;AACI,eAAOX,KAAP;AAvFR;AAyFH,GA3FD,CAbgC,CAyGhC;AACA;AACA;AAEA;;;AACAA,EAAAA,KAAK,CAACe,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;AAC1C;AACA,mBAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;AACnC,UAAIG,QAAQ,GAAG,MAAMlC,GAAG,CAACmC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcT,QAA7B;AACAA,QAAAA,QAAQ,CAACW,IAAT,GAAgBN,OAAhB;;AACA,uBAAeO,UAAf,CAA0BZ,QAA1B,EAAoC;AAChCO,UAAAA,QAAQ,GAAG,MAAMlC,GAAG,CAACwC,kBAAJ,CAAuBb,QAAQ,CAACc,GAAhC,EAAqCd,QAArC,CAAjB;;AACA,cAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,2BAAeK,YAAf,CAA4Bf,QAA5B,EAAsC;AAClCO,cAAAA,QAAQ,GAAG,MAAMlC,GAAG,CAAC2C,gBAAJ,EAAjB;;AACA,kBAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,oBAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcnB,WAA/B;AACAM,gBAAAA,YAAY,CAAC;AACTE,kBAAAA,IAAI,EAAErB,qBAAqB,CAACC,gBADnB;AAETqB,kBAAAA,OAAO,EAAE;AACLT,oBAAAA,WAAW,EAAE2B,UADR;AAELjB,oBAAAA,QAAQ,EAAEA;AAFL;AAFA,iBAAD,CAAZ;AAOH;AACJ;;AACDe,YAAAA,YAAY,CAACf,QAAD,CAAZ;AACH;AACJ;;AACDY,QAAAA,UAAU,CAACZ,QAAD,CAAV;AACH;AACJ;;AACDM,IAAAA,mBAAmB,CAACF,EAAD,CAAnB;AACH,GA9BD,CA9GgC,CA8IhC;;;AACAhB,EAAAA,KAAK,CAAC8B,gBAAN,GAAyB,YAAY;AACjCtB,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAErB,qBAAqB,CAACE,kBADnB;AAEToB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CA/IgC,CAsJhC;;;AACAX,EAAAA,KAAK,CAAC+B,eAAN,GAAwB,YAAY;AAChC,mBAAeC,oBAAf,GAAsC;AAClC,YAAMb,QAAQ,GAAG,MAAMlC,GAAG,CAAC2C,gBAAJ,EAAvB;;AACA,UAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcnB,WAA/B;AACAM,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAErB,qBAAqB,CAACG,kBADnB;AAETmB,UAAAA,OAAO,EAAEkB;AAFA,SAAD,CAAZ;AAIH,OAND,MAOK;AACDI,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;AACJ;;AACDF,IAAAA,oBAAoB;AACvB,GAfD;;AAiBAhC,EAAAA,KAAK,CAACmC,UAAN,GAAmB,YAAY;AAC3B,mBAAeA,UAAf,GAA4B;AACxB,UAAIC,OAAO,GAAG;AACV,gBAAQ,UADE;AAEV,iBAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB;AAFC,OAAd;AAIA,YAAMjB,QAAQ,GAAG,MAAMlC,GAAG,CAACoD,cAAJ,CAAmBD,OAAnB,CAAvB;;AACA,UAAGjB,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAA0B;AACtB,YAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcT,QAA7B;AACAJ,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAErB,qBAAqB,CAACI,gBADnB;AAETkB,UAAAA,OAAO,EAAEC;AAFA,SAAD,CAAZ;AAIAZ,QAAAA,KAAK,CAACsC,OAAN,CAAcC,IAAd,CAAmB,eAAe3B,QAAQ,CAACc,GAA3C;AACH,OAPD,MAQK;AACDO,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;AACJ;;AACDC,IAAAA,UAAU;AAEb,GArBD;;AAsBAnC,EAAAA,KAAK,CAACwC,mBAAN,GAA4B,YAAY;AACpCxC,IAAAA,KAAK,CAAC8B,gBAAN;AACH,GAFD;;AAGA9B,EAAAA,KAAK,CAACyC,gBAAN,GAAyB,UAAUC,IAAV,EAAgB;AACrC,mBAAeC,UAAf,CAA0BD,IAA1B,EAAgC;AAC5B,YAAMvB,QAAQ,GAAG,MAAMlC,GAAG,CAAC2D,kBAAJ,CAAuBF,IAAI,CAAChB,GAA5B,CAAvB;;AACA,UAAGP,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAA0B;AACtB,cAAMH,QAAQ,GAAG,MAAMlC,GAAG,CAAC2C,gBAAJ,EAAvB,CADsB,CACyB;;AAC/C,YAAGT,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAA0B;AACtB,cAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcnB,WAA/B;AACAM,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAErB,qBAAqB,CAACQ,YADnB;AAETc,YAAAA,OAAO,EAAE;AACLT,cAAAA,WAAW,EAAE2B;AADR;AAFA,WAAD,CAAZ;AAMH;AACJ;AAER;;AACDc,IAAAA,UAAU,CAACD,IAAD,CAAV;AACH,GAlBG,CAjMgC,CAqNhC;AACA;AACA;AACA;;;AACA1C,EAAAA,KAAK,CAAC6C,cAAN,GAAuB,UAAU7B,EAAV,EAAc;AACjC,mBAAe8B,mBAAf,CAAmC9B,EAAnC,EAAuC;AACnC,UAAIG,QAAQ,GAAG,MAAMlC,GAAG,CAACmC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcT,QAA7B;AAEAO,QAAAA,QAAQ,GAAG,MAAMlC,GAAG,CAACwC,kBAAJ,CAAuBb,QAAQ,CAACc,GAAhC,EAAqCd,QAArC,CAAjB;;AACA,YAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBd,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAErB,qBAAqB,CAACI,gBADnB;AAETkB,YAAAA,OAAO,EAAEC;AAFA,WAAD,CAAZ;AAIAZ,UAAAA,KAAK,CAACsC,OAAN,CAAcC,IAAd,CAAmB,eAAe3B,QAAQ,CAACc,GAA3C;AACH;AACJ;AACJ;;AACDoB,IAAAA,mBAAmB,CAAC9B,EAAD,CAAnB;AACH,GAjBD;;AAkBAhB,EAAAA,KAAK,CAAC+C,wBAAN,GAAiC,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;AAC/D,QAAIC,WAAW,GAAG,IAAIhE,sBAAJ,CAA2Ba,KAA3B,EAAkCgD,KAAlC,EAAyCC,OAAzC,EAAkDC,OAAlD,CAAlB;AACApD,IAAAA,GAAG,CAACsD,cAAJ,CAAmBD,WAAnB;AACH,GAHD;;AAIAnD,EAAAA,KAAK,CAACqD,sBAAN,GAA+B,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACjD,QAAIJ,WAAW,GAAG,IAAIjE,oBAAJ,CAAyBc,KAAzB,EAAgCsD,KAAhC,EAAuCC,GAAvC,CAAlB;AACAzD,IAAAA,GAAG,CAACsD,cAAJ,CAAmBD,WAAnB;AACH,GAHD;;AAIAnD,EAAAA,KAAK,CAACwD,QAAN,GAAiB,UAAUF,KAAV,EAAiBC,GAAjB,EAAsB;AACnCD,IAAAA,KAAK,IAAI,CAAT;AACAC,IAAAA,GAAG,IAAI,CAAP;;AACA,QAAID,KAAK,GAAGC,GAAZ,EAAiB;AACb,UAAIE,IAAI,GAAGzD,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBJ,KAAxB,CAAX;;AACA,WAAK,IAAIK,CAAC,GAAGL,KAAb,EAAoBK,CAAC,GAAGJ,GAAxB,EAA6BI,CAAC,EAA9B,EAAkC;AAC9B3D,QAAAA,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBC,CAAxB,IAA6B3D,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBC,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACD3D,MAAAA,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBH,GAAxB,IAA+BE,IAA/B;AACH,KAND,MAOK,IAAIH,KAAK,GAAGC,GAAZ,EAAiB;AAClB,UAAIE,IAAI,GAAGzD,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBJ,KAAxB,CAAX;;AACA,WAAK,IAAIK,CAAC,GAAGL,KAAb,EAAoBK,CAAC,GAAGJ,GAAxB,EAA6BI,CAAC,EAA9B,EAAkC;AAC9B3D,QAAAA,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBC,CAAxB,IAA6B3D,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBC,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACD3D,MAAAA,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBH,GAAxB,IAA+BE,IAA/B;AACH,KAhBkC,CAkBnC;;;AACAzD,IAAAA,KAAK,CAAC4D,iBAAN;AACH,GApBD;;AAqBA5D,EAAAA,KAAK,CAAC6D,UAAN,GAAmB,UAASb,KAAT,EAAgBc,IAAhB,EAAsB;AACrC9D,IAAAA,KAAK,CAACG,WAAN,CAAkBuD,KAAlB,CAAwBV,KAAxB,IAAiCc,IAAjC;AACA9D,IAAAA,KAAK,CAAC4D,iBAAN;AACH,GAHD;;AAIA5D,EAAAA,KAAK,CAAC4D,iBAAN,GAA0B,YAAW;AACjC,mBAAeG,sBAAf,GAAwC;AACpC,YAAM5C,QAAQ,GAAG,MAAMlC,GAAG,CAACwC,kBAAJ,CAAuBzB,KAAK,CAACG,WAAN,CAAkBuB,GAAzC,EAA8C1B,KAAK,CAACG,WAApD,CAAvB;;AACA,UAAIgB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBd,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAErB,qBAAqB,CAACI,gBADnB;AAETkB,UAAAA,OAAO,EAAEX,KAAK,CAACG;AAFN,SAAD,CAAZ;AAIH;AACJ;;AACD4D,IAAAA,sBAAsB;AACzB,GAXD;;AAYA/D,EAAAA,KAAK,CAACgE,IAAN,GAAa,YAAY;AACrBlE,IAAAA,GAAG,CAACmE,eAAJ;AACH,GAFD;;AAGAjE,EAAAA,KAAK,CAACkE,IAAN,GAAa,YAAY;AACrBpE,IAAAA,GAAG,CAACqE,aAAJ;AACH,GAFD,CA3RgC,CAiShC;;;AACAnE,EAAAA,KAAK,CAACoE,uBAAN,GAAgC,YAAY;AACxC5D,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAErB,qBAAqB,CAACK,yBADnB;AAETiB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CAlSgC,CAwShC;;;AACAX,EAAAA,KAAK,CAACqE,uBAAN,GAAgC,YAAY;AACxC7D,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAErB,qBAAqB,CAACM;AADnB,KAAD,CAAZ;AAGH,GAJD;;AAKAK,EAAAA,KAAK,CAACsE,iBAAN,GAA0B,UAAUtD,EAAV,EAAc;AACpC,mBAAesD,iBAAf,CAAiCtD,EAAjC,EAAqC;AACjC,UAAIG,QAAQ,GAAG,MAAMlC,GAAG,CAACmC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcT,QAA7B;AACAJ,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAErB,qBAAqB,CAACO,WADnB;AAETe,UAAAA,OAAO,EAAEC;AAFA,SAAD,CAAZ;AAIP;AACJ;;AACD0D,IAAAA,iBAAiB,CAACtD,EAAD,CAAjB;AACH,GAZG,CA9SgC,CA4ThC;;;AACA,SAAO;AAAEhB,IAAAA,KAAF;AAASQ,IAAAA;AAAT,GAAP;AACH,CA9TM;;GAAMT,c","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\r\n    DELETE_LIST: \"DELETE_LIST\",\r\n    AFTER_DELETE: \"AFTER_DELETE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            case GlobalStoreActionType.AFTER_DELETE: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: true,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: payload,\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.createList = function () {\r\n        async function createList() {\r\n            let newList = {\r\n                \"name\": \"Untitled\", \r\n                \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\r\n            };\r\n            const response = await api.createTop5List(newList);\r\n            if(response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: top5List\r\n                });\r\n                store.history.push(\"/top5list/\" + top5List._id);\r\n            }\r\n            else {\r\n                console.log(\"Upload Failed\");\r\n            }\r\n        }\r\n        createList();\r\n        \r\n    }\r\n    store.hideDeleteListModal = function () {\r\n        store.closeCurrentList();\r\n    }\r\n    store.deleteMarkedList = function (list) {\r\n        async function deleteList(list) {\r\n            const response = await api.deleteTop5ListById(list._id);\r\n            if(response.data.success) {\r\n                const response = await api.getTop5ListPairs(); //Update List Pairs\r\n                if(response.data.success) {\r\n                    let pairsArray = response.data.idNamePairs;\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.AFTER_DELETE,\r\n                        payload: {\r\n                            idNamePairs: pairsArray,\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            \r\n    }\r\n    deleteList(list);\r\n}\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.addUpdateItemTransaction = function(index, oldText, newText) {\r\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateItem = function(index, text) {\r\n        store.currentList.items[index] = text;\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n    \r\n\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A ITEM NAME\r\n    store.setIsItemNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\r\n        });\r\n    }\r\n    store.setIsDeleteActive = function (id) {\r\n        async function setIsDeleteActive(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.DELETE_LIST,\r\n                    payload: top5List\r\n                });\r\n        }\r\n    }\r\n    setIsDeleteActive(id);\r\n}\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}